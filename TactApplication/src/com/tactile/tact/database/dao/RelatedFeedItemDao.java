package com.tactile.tact.database.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tactile.tact.database.entities.FrozenFeedItem;

import com.tactile.tact.database.entities.RelatedFeedItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RELATED_FEED_ITEM.
*/
public class RelatedFeedItemDao extends AbstractDao<RelatedFeedItem, Long> {

    public static final String TABLENAME = "RELATED_FEED_ITEM";

    /**
     * Properties of entity RelatedFeedItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ParentId = new Property(1, long.class, "parentId", false, "PARENT_ID");
        public final static Property ChildId = new Property(2, long.class, "childId", false, "CHILD_ID");
    };

    private DaoSession daoSession;

    private Query<RelatedFeedItem> frozenFeedItem_RelatedParentsQuery;
    private Query<RelatedFeedItem> frozenFeedItem_RelatedChildsQuery;

    public RelatedFeedItemDao(DaoConfig config) {
        super(config);
    }
    
    public RelatedFeedItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RELATED_FEED_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PARENT_ID' INTEGER NOT NULL ," + // 1: parentId
                "'CHILD_ID' INTEGER NOT NULL );"); // 2: childId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RELATED_FEED_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RelatedFeedItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getParentId());
        stmt.bindLong(3, entity.getChildId());
    }

    @Override
    protected void attachEntity(RelatedFeedItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RelatedFeedItem readEntity(Cursor cursor, int offset) {
        RelatedFeedItem entity = new RelatedFeedItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // parentId
            cursor.getLong(offset + 2) // childId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RelatedFeedItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setParentId(cursor.getLong(offset + 1));
        entity.setChildId(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RelatedFeedItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RelatedFeedItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "relatedParents" to-many relationship of FrozenFeedItem. */
    public List<RelatedFeedItem> _queryFrozenFeedItem_RelatedParents(long parentId) {
        synchronized (this) {
            if (frozenFeedItem_RelatedParentsQuery == null) {
                QueryBuilder<RelatedFeedItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                frozenFeedItem_RelatedParentsQuery = queryBuilder.build();
            }
        }
        Query<RelatedFeedItem> query = frozenFeedItem_RelatedParentsQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

    /** Internal query to resolve the "relatedChilds" to-many relationship of FrozenFeedItem. */
    public List<RelatedFeedItem> _queryFrozenFeedItem_RelatedChilds(long childId) {
        synchronized (this) {
            if (frozenFeedItem_RelatedChildsQuery == null) {
                QueryBuilder<RelatedFeedItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChildId.eq(null));
                frozenFeedItem_RelatedChildsQuery = queryBuilder.build();
            }
        }
        Query<RelatedFeedItem> query = frozenFeedItem_RelatedChildsQuery.forCurrentThread();
        query.setParameter(0, childId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFrozenFeedItemDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFrozenFeedItemDao().getAllColumns());
            builder.append(" FROM RELATED_FEED_ITEM T");
            builder.append(" LEFT JOIN FROZEN_FEED_ITEM T0 ON T.'PARENT_ID'=T0.'_id'");
            builder.append(" LEFT JOIN FROZEN_FEED_ITEM T1 ON T.'CHILD_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RelatedFeedItem loadCurrentDeep(Cursor cursor, boolean lock) {
        RelatedFeedItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FrozenFeedItem parent = loadCurrentOther(daoSession.getFrozenFeedItemDao(), cursor, offset);
         if(parent != null) {
            entity.setParent(parent);
        }
        offset += daoSession.getFrozenFeedItemDao().getAllColumns().length;

        FrozenFeedItem child = loadCurrentOther(daoSession.getFrozenFeedItemDao(), cursor, offset);
         if(child != null) {
            entity.setChild(child);
        }

        return entity;    
    }

    public RelatedFeedItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RelatedFeedItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RelatedFeedItem> list = new ArrayList<RelatedFeedItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RelatedFeedItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RelatedFeedItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
