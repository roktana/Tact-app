package com.tactile.tact.database.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tactile.tact.database.entities.FrozenFeedItem;
import com.tactile.tact.database.entities.OpportunityFI;

import com.tactile.tact.database.entities.FrozenFeedItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FROZEN_FEED_ITEM.
*/
public class FrozenFeedItemDao extends AbstractDao<FrozenFeedItem, Long> {

    public static final String TABLENAME = "FROZEN_FEED_ITEM";

    /**
     * Properties of entity FrozenFeedItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsActivity = new Property(1, Boolean.class, "isActivity", false, "IS_ACTIVITY");
        public final static Property IsHidden = new Property(2, int.class, "isHidden", false, "IS_HIDDEN");
        public final static Property IsDeleted = new Property(3, int.class, "isDeleted", false, "IS_DELETED");
        public final static Property NeedSync = new Property(4, int.class, "needSync", false, "NEED_SYNC");
        public final static Property ServerId = new Property(5, String.class, "serverId", false, "SERVER_ID");
        public final static Property Timestamp = new Property(6, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property Label = new Property(8, String.class, "label", false, "LABEL");
        public final static Property IsSeen = new Property(9, Boolean.class, "isSeen", false, "IS_SEEN");
        public final static Property IsMaster = new Property(10, Boolean.class, "isMaster", false, "IS_MASTER");
        public final static Property Item = new Property(11, byte[].class, "item", false, "ITEM");
        public final static Property SourceId = new Property(12, Integer.class, "sourceId", false, "SOURCE_ID");
        public final static Property SourceName = new Property(13, String.class, "sourceName", false, "SOURCE_NAME");
        public final static Property MasterId = new Property(14, Long.class, "masterId", false, "MASTER_ID");
        public final static Property OpportunityId = new Property(15, long.class, "opportunityId", false, "OPPORTUNITY_ID");
    };

    private DaoSession daoSession;

    private Query<FrozenFeedItem> frozenFeedItem_OriginalQuery;
    private Query<FrozenFeedItem> opportunityFI_FeedItemsQuery;

    public FrozenFeedItemDao(DaoConfig config) {
        super(config);
    }
    
    public FrozenFeedItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FROZEN_FEED_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IS_ACTIVITY' INTEGER," + // 1: isActivity
                "'IS_HIDDEN' INTEGER NOT NULL ," + // 2: isHidden
                "'IS_DELETED' INTEGER NOT NULL ," + // 3: isDeleted
                "'NEED_SYNC' INTEGER NOT NULL ," + // 4: needSync
                "'SERVER_ID' TEXT," + // 5: serverId
                "'TIMESTAMP' INTEGER," + // 6: timestamp
                "'TYPE' TEXT," + // 7: type
                "'LABEL' TEXT," + // 8: label
                "'IS_SEEN' INTEGER," + // 9: isSeen
                "'IS_MASTER' INTEGER," + // 10: isMaster
                "'ITEM' BLOB," + // 11: item
                "'SOURCE_ID' INTEGER," + // 12: sourceId
                "'SOURCE_NAME' TEXT," + // 13: sourceName
                "'MASTER_ID' INTEGER," + // 14: masterId
                "'OPPORTUNITY_ID' INTEGER NOT NULL );"); // 15: opportunityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FROZEN_FEED_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FrozenFeedItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean isActivity = entity.getIsActivity();
        if (isActivity != null) {
            stmt.bindLong(2, isActivity ? 1l: 0l);
        }
        stmt.bindLong(3, entity.getIsHidden());
        stmt.bindLong(4, entity.getIsDeleted());
        stmt.bindLong(5, entity.getNeedSync());
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(6, serverId);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(7, timestamp);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(9, label);
        }
 
        Boolean isSeen = entity.getIsSeen();
        if (isSeen != null) {
            stmt.bindLong(10, isSeen ? 1l: 0l);
        }
 
        Boolean isMaster = entity.getIsMaster();
        if (isMaster != null) {
            stmt.bindLong(11, isMaster ? 1l: 0l);
        }
 
        byte[] item = entity.getItem();
        if (item != null) {
            stmt.bindBlob(12, item);
        }
 
        Integer sourceId = entity.getSourceId();
        if (sourceId != null) {
            stmt.bindLong(13, sourceId);
        }
 
        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(14, sourceName);
        }
 
        Long masterId = entity.getMasterId();
        if (masterId != null) {
            stmt.bindLong(15, masterId);
        }
        stmt.bindLong(16, entity.getOpportunityId());
    }

    @Override
    protected void attachEntity(FrozenFeedItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FrozenFeedItem readEntity(Cursor cursor, int offset) {
        FrozenFeedItem entity = new FrozenFeedItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isActivity
            cursor.getInt(offset + 2), // isHidden
            cursor.getInt(offset + 3), // isDeleted
            cursor.getInt(offset + 4), // needSync
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // serverId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // timestamp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // label
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isSeen
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isMaster
            cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11), // item
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // sourceId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sourceName
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // masterId
            cursor.getLong(offset + 15) // opportunityId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FrozenFeedItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsActivity(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setIsHidden(cursor.getInt(offset + 2));
        entity.setIsDeleted(cursor.getInt(offset + 3));
        entity.setNeedSync(cursor.getInt(offset + 4));
        entity.setServerId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimestamp(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLabel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSeen(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsMaster(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setItem(cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11));
        entity.setSourceId(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setSourceName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMasterId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setOpportunityId(cursor.getLong(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FrozenFeedItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FrozenFeedItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "original" to-many relationship of FrozenFeedItem. */
    public List<FrozenFeedItem> _queryFrozenFeedItem_Original(Long masterId) {
        synchronized (this) {
            if (frozenFeedItem_OriginalQuery == null) {
                QueryBuilder<FrozenFeedItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MasterId.eq(null));
                frozenFeedItem_OriginalQuery = queryBuilder.build();
            }
        }
        Query<FrozenFeedItem> query = frozenFeedItem_OriginalQuery.forCurrentThread();
        query.setParameter(0, masterId);
        return query.list();
    }

    /** Internal query to resolve the "feedItems" to-many relationship of OpportunityFI. */
    public List<FrozenFeedItem> _queryOpportunityFI_FeedItems(long opportunityId) {
        synchronized (this) {
            if (opportunityFI_FeedItemsQuery == null) {
                QueryBuilder<FrozenFeedItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OpportunityId.eq(null));
                opportunityFI_FeedItemsQuery = queryBuilder.build();
            }
        }
        Query<FrozenFeedItem> query = opportunityFI_FeedItemsQuery.forCurrentThread();
        query.setParameter(0, opportunityId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFrozenFeedItemDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getOpportunityFIDao().getAllColumns());
            builder.append(" FROM FROZEN_FEED_ITEM T");
            builder.append(" LEFT JOIN FROZEN_FEED_ITEM T0 ON T.'MASTER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN OPPORTUNITY_FI T1 ON T.'OPPORTUNITY_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FrozenFeedItem loadCurrentDeep(Cursor cursor, boolean lock) {
        FrozenFeedItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FrozenFeedItem master = loadCurrentOther(daoSession.getFrozenFeedItemDao(), cursor, offset);
        entity.setMaster(master);
        offset += daoSession.getFrozenFeedItemDao().getAllColumns().length;

        OpportunityFI opportunity = loadCurrentOther(daoSession.getOpportunityFIDao(), cursor, offset);
         if(opportunity != null) {
            entity.setOpportunity(opportunity);
        }

        return entity;    
    }

    public FrozenFeedItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FrozenFeedItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FrozenFeedItem> list = new ArrayList<FrozenFeedItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FrozenFeedItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FrozenFeedItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
