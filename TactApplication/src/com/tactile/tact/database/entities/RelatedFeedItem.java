package com.tactile.tact.database.entities;

import com.tactile.tact.database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.tactile.tact.database.dao.FrozenFeedItemDao;
import com.tactile.tact.database.dao.RelatedFeedItemDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table RELATED_FEED_ITEM.
 */
public class RelatedFeedItem {

    private Long id;
    private long parentId;
    private long childId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RelatedFeedItemDao myDao;

    private FrozenFeedItem parent;
    private Long parent__resolvedKey;

    private FrozenFeedItem child;
    private Long child__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RelatedFeedItem() {
    }

    public RelatedFeedItem(Long id) {
        this.id = id;
    }

    public RelatedFeedItem(Long id, long parentId, long childId) {
        this.id = id;
        this.parentId = parentId;
        this.childId = childId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRelatedFeedItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getParentId() {
        return parentId;
    }

    public void setParentId(long parentId) {
        this.parentId = parentId;
    }

    public long getChildId() {
        return childId;
    }

    public void setChildId(long childId) {
        this.childId = childId;
    }

    /** To-one relationship, resolved on first access. */
    public FrozenFeedItem getParent() {
        long __key = this.parentId;
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FrozenFeedItemDao targetDao = daoSession.getFrozenFeedItemDao();
            FrozenFeedItem parentNew = targetDao.load(__key);
            synchronized (this) {
                parent = parentNew;
            	parent__resolvedKey = __key;
            }
        }
        return parent;
    }

    public void setParent(FrozenFeedItem parent) {
        if (parent == null) {
            throw new DaoException("To-one property 'parentId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.parent = parent;
            parentId = parent.getId();
            parent__resolvedKey = parentId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public FrozenFeedItem getChild() {
        long __key = this.childId;
        if (child__resolvedKey == null || !child__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FrozenFeedItemDao targetDao = daoSession.getFrozenFeedItemDao();
            FrozenFeedItem childNew = targetDao.load(__key);
            synchronized (this) {
                child = childNew;
            	child__resolvedKey = __key;
            }
        }
        return child;
    }

    public void setChild(FrozenFeedItem child) {
        if (child == null) {
            throw new DaoException("To-one property 'childId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.child = child;
            childId = child.getId();
            child__resolvedKey = childId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
